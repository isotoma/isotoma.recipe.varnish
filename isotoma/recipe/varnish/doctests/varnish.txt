
Simple creation of an squid config
===================================

Lets create a minimal `buildout.cfg` file::

  >>> write('buildout.cfg',
  ... '''
  ... [buildout]
  ... parts = varnish
  ... offline = true
  ...
  ... [varnish]
  ... recipe = isotoma.recipe.varnish
  ... daemon = /usr/sbin/varnishd
  ... bind = 127.0.0.1:1234
  ... name = localhost
  ... cache-size = 80M
  ... telnet = 127.0.0.1:1234
  ... varnishlog = /usr/bin/varnishncsa
  ... logfile = /var/log/varnish/varnishlog.log
  ... user = zope
  ... group = zope
  ... verbose-headers = on
  ... backends = 127.0.0.1:1234
  ... ''')

Now we can run buildout::

  >>> print system(join('bin', 'buildout')),
  Installing varnish.

The config was indeed created::

  >>> cat('parts/varnish/varnish.vcl')
  # Copyright 2010 Isotoma Limited
  # Licensed under the Apache License, Version 2.0 (the "License");
  # you may not use this file except in compliance with the License.
  # You may obtain a copy of the License at
  #   http://www.apache.org/licenses/LICENSE-2.0
  # Unless required by applicable law or agreed to in writing, software
  # distributed under the License is distributed on an "AS IS" BASIS,
  # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  # See the License for the specific language governing permissions and
  # limitations under the License.
  <BLANKLINE>
  <BLANKLINE>
  # This is a basic VCL configuration file for varnish.  See the vcl(7)
  # man page for details on VCL syntax and semantics.
  <BLANKLINE>
  backend backend_0 {
      .host = "127.0.0.1";
      .port = "1234";
      .connect_timeout = 0.4s;
      .first_byte_timeout = 300s;
      .between_bytes_timeout = 60s;
  }
  <BLANKLINE>
  acl purge {
      "localhost";
      "127.0.0.1";
  }
  <BLANKLINE>
  sub vcl_recv {
      set req.grace = 120s;
  <BLANKLINE>
      if (req.request == "PURGE") {
          if (!client.ip ~ purge) {
              error 405 "Not allowed.";
          }
          lookup;
      }
  <BLANKLINE>
      if (req.request != "GET" &&
          req.request != "HEAD" &&
          req.request != "PUT" &&
          req.request != "POST" &&
          req.request != "TRACE" &&
          req.request != "OPTIONS" &&
          req.request != "DELETE") {
          /* Non-RFC2616 or CONNECT which is weird. */
          pipe;
      }
  <BLANKLINE>
      if (req.request != "GET" && req.request != "HEAD") {
          /* We only deal with GET and HEAD by default */
          pass;
      }
  <BLANKLINE>
      if (req.http.If-None-Match) {
          pass;
      }
  <BLANKLINE>
      if (req.url ~ "createObject") {
          pass;
      }
  <BLANKLINE>
      # Pipe large files to avoid a back-end shutdown (#7274)
      if (req.url ~ "/getFile" ||
          req.url ~ "/zip/" ||
          req.url ~ "/webcast/") {
          pipe;
      }
  <BLANKLINE>
      remove req.http.Accept-Encoding;
  <BLANKLINE>
      lookup;
  }
  <BLANKLINE>
  sub vcl_pipe {
      # This is not necessary if you do not do any request rewriting.
      set req.http.connection = "close";
  }
  <BLANKLINE>
  sub vcl_hit {
      if (req.request == "PURGE") {
          set obj.ttl = 0s;
          error 200 "Purged";
      }
  <BLANKLINE>
      if (!obj.cacheable) {
          pass;
      }
  }
  <BLANKLINE>
  sub vcl_miss {
      if (req.request == "PURGE") {
          error 404 "Not in cache";
      }
  <BLANKLINE>
  }
  <BLANKLINE>
  sub vcl_fetch {
      set obj.grace = 120s;
      if (obj.status == 302) {
          set obj.http.X-Cacheable = "NO:302";
          pass;
      }
  <BLANKLINE>
      if (!obj.cacheable) {
          set obj.http.X-Cacheable = "NO";
          pass;
      }
      if (obj.http.Cache-Control ~ "(private|no-cache|no-store)") {
          set obj.http.X-Cacheable = "NO:private";
          pass;
      }
      # default rule for cases where CacheFu is not running - never cache
      # HTML
      if (obj.http.Content-Type ~ "^text/html") {
          set obj.http.X-Cacheable = "NO:html";
          pass;
      }
      set obj.http.X-Cacheable = "YES";
      unset obj.http.set-cookie;
      deliver;
  }
  <BLANKLINE>
  sub vcl_deliver {
          if (obj.hits > 0) {
                  set resp.http.X-Cache = "HIT";
          } else {
                  set resp.http.X-Cache = "MISS";
          }
  }
  <BLANKLINE>
